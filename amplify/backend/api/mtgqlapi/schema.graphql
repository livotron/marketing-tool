type Business @model
    @key(name: "byManager", fields: ["managerID", "companyName"], queryField: "byManagerAndCompany")
    @auth(rules: [
          { allow: owner },
          { allow: public, operations: [read]},
          { allow: private, operations: [read] },
      ]) {
  id: ID!
  companyName: String!
  storeURLs: [String!]!
  websiteURLs: [String!]!
  employees: [Employee] @connection(keyName: "byBusiness", fields: ["id"])
  manager: Manager @connection(fields: ["managerID"])
  managerID: ID!
}

type Employee @model
    @key(name: "byBusiness", fields: ["businessID"], queryField: "employeeByBusinessAndName")
    @auth(rules: [
      { allow: owner, ownerField: "id" },
      { allow: public, operations: [read]},
      { allow: private, operations: [read] },
    ])  {
  id: ID!
  profile: Profile @connection(fields: ["id"])
  business: Business @connection(fields: ["businessID"])
  businessID: ID!
  roleTags: RoleTags!
  countryCode: CountryCode!
  phoneNumber: String!
}

type Manager @model
    @auth(rules: [
      { allow: owner, ownerField: "id" },
      { allow: public, operations: [read]},
      { allow: private, operations: [read] },
      ])  {
  id: ID!
  profile: Profile @connection(fields: ["id"])
  businesses: [Business] @connection(keyName: "byManager", fields: ["id"])
}

type Profile @model
    @auth(rules: [
      { allow: owner, ownerField: "id" },
      { allow: public, operations: [read]},
      { allow: private, operations: [read] },
    ])  {
  id: ID!
  email: String!
  name: String!
  avatar: S3Object
  # initiatedConversations: [Conversation] @connection(keyName: "byInitiatedProfile", fields: ["id"])
  # repliedConversations: [Conversation] @connection(keyName: "byRepliedProfile", fields: ["id"])

}
# type Conversation @model
#     @key(name: "byInitiatedProfile", fields: ["initiatedProfileID", "subjectId","stage"], queryField:"byInitiatedProfile")
#     @key(name: "byRepliedProfile", fields: ["repliedProfileID", "subjectId","stage"], queryField:"byRepliedProfile")
#     @auth(rules: [
#       { allow: owner },
#       { allow: private, operations: [read] }
#       ])  {
#   id: ID!
#   stage: Stage!
#   subjectId: ID!
#   initiatedProfile: Profile @connection(fields:["initiatedProfileID"])
#   initiatedProfileID: ID!
#   repliedProfile: Profile @connection(fields: ["repliedProfileID"])
#   repliedProfileID: ID!
#   messages: [Message] @connection(keyName: "byConversation", fields: ["id"])
# }

type Message @model(subscriptions: null)
    # @key(name: "bySender", fields: ["senderID", "subjectId","stage"], queryField:"bySender")
    # @key(name: "byReceiver", fields: ["receiverID", "subjectID","stage"], queryField:"byReceiver")
    @key(name: "getIncomingMessages", fields: ["receiverID", "status"], queryField:"getIncomingMessages")
    @key(name: "getDialogue", fields: ["sharedID", "subjectID","stage"], queryField: "getDialogue")
    @key(name: "getConversation", fields: ["sharedID", "subjectID","stage","createdAt"], queryField: "getConversation")
    @auth(rules: [
      { allow: private }
      ])  {
  id: ID!
  stage: Stage!
  subjectID: ID!
  # sender: Profile @connection(fields: ["senderID"])
  senderID: ID!
  # receiver: Profile @connection(fields: ["receiverID"])
  receiverID: ID!
  sharedID: ID!
  content: String!
  status: MessageStatus!
  attachment: S3Object
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Subscription {
  onCreateMessage(receiverID: ID): Message @aws_subscribe(mutations: ["createMessage"])
  onUpdateMessage(sharedID: ID): Message @aws_subscribe(mutations: ["updateMessage"])
  onDeleteMessage(id: ID): Message @aws_subscribe(mutations: ["deleteMessage"])
  onEraseMessage: Message @aws_subscribe(mutations: ["deleteMessage"])
}

enum MessageStatus {
  CREATED
  SENT
  RECEIVED
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type RoleTags {
  sales: Boolean!
  marketing: Boolean!
  logistics: Boolean!
  accounting: Boolean!
  production: Boolean!
  qualityControl: Boolean!
}

type CountryCode {
  code: String!
  label: String!
  phone: String!
}

enum Stage {
    UNASSIGNED
    PRODUCTS
    MARKET_RESEARCH
    BRAND_CREATION
    SALES_CHANNELS
    CUSTOMER_SUPPORT
    BRAND_AWARENESS
    SALES_STATISTICS
    IMPROVEMENTS
}